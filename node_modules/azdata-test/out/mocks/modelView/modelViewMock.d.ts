import * as azdata from 'azdata';
import * as TypeMoq from 'typemoq';
export declare type ComponentAndMockComponentBuilder<C, B> = {
    component: C;
    mockBuilder: TypeMoq.IMock<B>;
};
export declare type ComponentFactories = {
    checkBox?: () => azdata.CheckBoxComponent;
    text?: () => azdata.TextComponent;
    radioButton?: () => azdata.RadioButtonComponent;
    inputBox?: () => azdata.InputBoxComponent;
    button?: () => azdata.ButtonComponent;
    loadingComponent?: () => azdata.LoadingComponent;
    groupContainer?: () => azdata.GroupContainer;
    divContainer?: () => azdata.DivContainer;
    flexContainer?: () => azdata.FlexContainer;
    formContainer?: () => azdata.FormContainer;
};
/**
 * Creates a mock ModelView to simulate interactions with the ADS ModelView API
 * @param componentFactories Used to specify factory methods to create the component mocks if more fine grained control is required
 */
export declare function createModelViewMock(componentFactories?: ComponentFactories): {
    modelBuilderMock: TypeMoq.IMock<azdata.ModelBuilder>;
    modelViewMock: TypeMoq.IMock<azdata.ModelView>;
};
export declare function createFormContainerBuilderMock(container?: azdata.FormContainer): TypeMoq.IMock<azdata.FormBuilder>;
export declare function createContainerBuilderMock<C extends azdata.Container<any, any>, P extends azdata.ComponentProperties = azdata.ComponentProperties, B extends azdata.ContainerBuilder<C, any, any, P> = azdata.ContainerBuilder<C, any, any, P>>(container?: C): ComponentAndMockComponentBuilder<C, B>;
export declare function createLoadingComponentBuilderMock(component?: azdata.LoadingComponent): ComponentAndMockComponentBuilder<azdata.LoadingComponent, azdata.LoadingComponentBuilder>;
export declare function createComponentBuilderMock<C extends azdata.Component, P extends azdata.ComponentProperties = azdata.ComponentProperties, B extends azdata.ComponentBuilder<C, P> = azdata.ComponentBuilder<C, P>>(component?: C): ComponentAndMockComponentBuilder<C, B>;
