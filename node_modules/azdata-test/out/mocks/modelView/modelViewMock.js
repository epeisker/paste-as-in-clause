"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the Source EULA. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponentBuilderMock = exports.createLoadingComponentBuilderMock = exports.createContainerBuilderMock = exports.createFormContainerBuilderMock = exports.createModelViewMock = void 0;
var TypeMoq = require("typemoq");
var stubButton_1 = require("../../stubs/modelView/stubButton");
var stubCheckbox_1 = require("../../stubs/modelView/stubCheckbox");
var stubDivContainer_1 = require("../../stubs/modelView/stubDivContainer");
var stubFlexContainer_1 = require("../../stubs/modelView/stubFlexContainer");
var stubRadioButton_1 = require("../../stubs/modelView/stubRadioButton");
var stubText_1 = require("../../stubs/modelView/stubText");
/**
 * Creates a mock ModelView to simulate interactions with the ADS ModelView API
 * @param componentFactories Used to specify factory methods to create the component mocks if more fine grained control is required
 */
function createModelViewMock(componentFactories) {
    var mockModelView = TypeMoq.Mock.ofType();
    var mockModelBuilder = TypeMoq.Mock.ofType();
    mockModelBuilder.setup(function (b) { return b.checkBox(); }).returns(function () {
        var _a, _b;
        var mockCheckbox = createComponentBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.checkBox) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubCheckbox_1.StubCheckbox());
        return mockCheckbox.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.text(); }).returns(function () {
        var _a, _b;
        var mockTextBuilder = createComponentBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.text) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubText_1.StubText());
        return mockTextBuilder.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.radioButton(); }).returns(function () {
        var _a, _b;
        var mockRadioButton = createComponentBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.radioButton) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubRadioButton_1.StubRadioButton());
        return mockRadioButton.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.inputBox(); }).returns(function () {
        var _a, _b;
        var mockInputBox = createComponentBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.inputBox) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubCheckbox_1.StubInputBox());
        return mockInputBox.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.button(); }).returns(function () {
        var _a, _b;
        var mockButton = createComponentBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.button) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubButton_1.StubButton());
        return mockButton.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.loadingComponent(); }).returns(function () {
        var _a;
        var mockLoadingBuilder = createLoadingComponentBuilderMock((_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.loadingComponent) === null || _a === void 0 ? void 0 : _a.call(componentFactories));
        return mockLoadingBuilder.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.groupContainer(); }).returns(function () {
        var _a;
        var mockGroupContainerBuilder = createContainerBuilderMock((_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.groupContainer) === null || _a === void 0 ? void 0 : _a.call(componentFactories));
        return mockGroupContainerBuilder.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.divContainer(); }).returns(function () {
        var _a, _b;
        var mockDivContainerBuilder = createContainerBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.divContainer) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubDivContainer_1.StubDivContainer());
        return mockDivContainerBuilder.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.flexContainer(); }).returns(function () {
        var _a, _b;
        var mockFlexContainerBuilder = createContainerBuilderMock((_b = (_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.flexContainer) === null || _a === void 0 ? void 0 : _a.call(componentFactories)) !== null && _b !== void 0 ? _b : new stubFlexContainer_1.StubFlexContainer());
        return mockFlexContainerBuilder.mockBuilder.object;
    });
    mockModelBuilder.setup(function (b) { return b.formContainer(); }).returns(function () {
        var _a;
        var mockFormContainerBuilder = createFormContainerBuilderMock((_a = componentFactories === null || componentFactories === void 0 ? void 0 : componentFactories.formContainer) === null || _a === void 0 ? void 0 : _a.call(componentFactories));
        return mockFormContainerBuilder.object;
    });
    mockModelView.setup(function (mv) { return mv.modelBuilder; }).returns(function () { return mockModelBuilder.object; });
    return {
        modelBuilderMock: mockModelBuilder,
        modelViewMock: mockModelView
    };
}
exports.createModelViewMock = createModelViewMock;
function createFormContainerBuilderMock(container) {
    var mockContainerBuilder = createContainerBuilderMock(container);
    mockContainerBuilder.mockBuilder.setup(function (b) { return b.withFormItems(TypeMoq.It.isAny(), TypeMoq.It.isAny()); }).returns(function () { return mockContainerBuilder.mockBuilder.object; });
    return mockContainerBuilder.mockBuilder;
}
exports.createFormContainerBuilderMock = createFormContainerBuilderMock;
function createContainerBuilderMock(container) {
    var mockContainerBuilder = createComponentBuilderMock(container);
    // For now just have these be passthrough - can hook up additional functionality later if needed
    mockContainerBuilder.mockBuilder.setup(function (b) { return b.withItems(TypeMoq.It.isAny(), TypeMoq.It.isAny()); }).returns(function (items) {
        mockContainerBuilder.component.addItems(items);
        return mockContainerBuilder.mockBuilder.object;
    });
    mockContainerBuilder.mockBuilder.setup(function (b) { return b.withItems(TypeMoq.It.isAny(), undefined); }).returns(function (items) {
        mockContainerBuilder.component.addItems(items);
        return mockContainerBuilder.mockBuilder.object;
    });
    mockContainerBuilder.mockBuilder.setup(function (b) { return b.withLayout(TypeMoq.It.isAny()); }).returns(function () { return mockContainerBuilder.mockBuilder.object; });
    return mockContainerBuilder;
}
exports.createContainerBuilderMock = createContainerBuilderMock;
function createLoadingComponentBuilderMock(component) {
    var mockComponentBuilder = createComponentBuilderMock(component);
    mockComponentBuilder.mockBuilder.setup(function (x) { return x.withItem(TypeMoq.It.isAny()); }).returns(function () { return mockComponentBuilder.mockBuilder.object; });
    return mockComponentBuilder;
}
exports.createLoadingComponentBuilderMock = createLoadingComponentBuilderMock;
function createComponentBuilderMock(component) {
    var mockComponentBuilder = TypeMoq.Mock.ofType();
    // Create a mocked dynamic component if we don't have a stub instance to use.
    // Note that we don't use ofInstance here for the component because there's some limitations around properties that I was
    // hitting preventing me from easily using TypeMoq. Passing in the stub instance lets users control the object being stubbed - which means
    // they can use things like sinon to then override specific functions if desired.
    if (!component) {
        var mockComponent = TypeMoq.Mock.ofType();
        // Need to setup then for when a dynamic mocked object is resolved otherwise the test will hang : https://github.com/florinn/typemoq/issues/66
        mockComponent.setup(function (x) { return x.then; }).returns(function () { return undefined; });
        component = mockComponent.object;
    }
    mockComponentBuilder.setup(function (b) { return b.withProperties(TypeMoq.It.isAny()); }).returns(function (props) {
        // Apply the properties to the object directly
        for (var key in props) {
            component[key] = props[key];
        }
        return mockComponentBuilder.object;
    });
    mockComponentBuilder.setup(function (b) { return b.withValidation(TypeMoq.It.isAny()); }).returns(function () { return mockComponentBuilder.object; });
    mockComponentBuilder.setup(function (b) { return b.component(); }).returns(function () { return component; });
    return {
        component: component,
        mockBuilder: mockComponentBuilder
    };
}
exports.createComponentBuilderMock = createComponentBuilderMock;
